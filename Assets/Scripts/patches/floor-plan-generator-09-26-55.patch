diff --git forkSrcPrefix/Assets/Config/TestingFloorPlansConfig.asset forkDstPrefix/Assets/Config/TestingFloorPlansConfig.asset
index 7ba88200ba2efe258216b705e855906ae512ddaa..87bba9448c1bf4ce0603da0bfa3a55be403ff896 100644
--- forkSrcPrefix/Assets/Config/TestingFloorPlansConfig.asset
+++ forkDstPrefix/Assets/Config/TestingFloorPlansConfig.asset
@@ -13,50 +13,60 @@ MonoBehaviour:
   m_Name: TestingFloorPlansConfig
   m_EditorClassIdentifier: 
   FloorPlanConfigs:
-  - FloorPlanId: Plan 1
-    GridDimensions: {x: 30, y: 30}
+  - FloorPlanId: Real
+    GridDimensions: {x: 15, y: 15}
     ZonesConfigs:
       _serializedList:
-      - Key: A
+      - Key: T
         Value:
           _parentZoneId: 
           _areaRatio: 1
-          _presetArea: {fileID: 2800000, guid: b42ee4e18c7dd9a458dfc7f64048db94, type: 3}
+          _presetArea: {fileID: 0}
+      - Key: U
+        Value:
+          _parentZoneId: T
+          _areaRatio: 0.5
+          _presetArea: {fileID: 0}
+      - Key: I
+        Value:
+          _parentZoneId: T
+          _areaRatio: 0.5
+          _presetArea: {fileID: 0}
+      - Key: A
+        Value:
+          _parentZoneId: U
+          _areaRatio: 0.15
+          _presetArea: {fileID: 0}
       - Key: B
         Value:
-          _parentZoneId: A
-          _areaRatio: 0.3
+          _parentZoneId: U
+          _areaRatio: 0.15
           _presetArea: {fileID: 0}
       - Key: C
         Value:
-          _parentZoneId: A
-          _areaRatio: 0.2
+          _parentZoneId: I
+          _areaRatio: 0.1
           _presetArea: {fileID: 0}
       - Key: D
         Value:
-          _parentZoneId: A
+          _parentZoneId: I
           _areaRatio: 0.2
           _presetArea: {fileID: 0}
       - Key: E
         Value:
-          _parentZoneId: A
-          _areaRatio: 0.3
-          _presetArea: {fileID: 0}
-      - Key: F
-        Value:
-          _parentZoneId: B
-          _areaRatio: 0.1
-          _presetArea: {fileID: 2800000, guid: 0a3fa9861879cc7469ef16c79d25dcb6, type: 3}
-      - Key: G
-        Value:
-          _parentZoneId: B
-          _areaRatio: 0.1
+          _parentZoneId: I
+          _areaRatio: 0.2
           _presetArea: {fileID: 0}
     Adjacencies:
       _serializedList:
-      - Key: F
+      - Key: A
         Value:
-        - G
+        - B
+        - C
+      - Key: C
+        Value:
+        - D
+        - E
     ZonesAreasPresets:
       _serializedList: []
   - FloorPlanId: Plan 0
@@ -119,72 +129,57 @@ MonoBehaviour:
         Value:
         - F
         - H
+        - C
     ZonesAreasPresets:
       _serializedList: []
-  - FloorPlanId: Plan 2 - uncle w test
-    GridDimensions: {x: 15, y: 10}
+  - FloorPlanId: Plan 1
+    GridDimensions: {x: 30, y: 30}
     ZonesConfigs:
       _serializedList:
-      - Key: red
-        Value:
-          _parentZoneId: 
-          _areaRatio: 0
-          _presetArea: {fileID: 0}
-      - Key: blue
-        Value:
-          _parentZoneId: 
-          _areaRatio: 0
-          _presetArea: {fileID: 0}
-      - Key: green
+      - Key: A
         Value:
           _parentZoneId: 
-          _areaRatio: 0
-          _presetArea: {fileID: 0}
-      - Key: cian
+          _areaRatio: 1
+          _presetArea: {fileID: 2800000, guid: b42ee4e18c7dd9a458dfc7f64048db94, type: 3}
+      - Key: B
         Value:
-          _parentZoneId: 
-          _areaRatio: 0
+          _parentZoneId: A
+          _areaRatio: 0.3
           _presetArea: {fileID: 0}
-      - Key: mag
+      - Key: C
         Value:
-          _parentZoneId: 
-          _areaRatio: 0
+          _parentZoneId: A
+          _areaRatio: 0.2
           _presetArea: {fileID: 0}
-      - Key: yel
+      - Key: D
         Value:
-          _parentZoneId: 
-          _areaRatio: 0
+          _parentZoneId: A
+          _areaRatio: 0.2
           _presetArea: {fileID: 0}
-      - Key: vomito
+      - Key: E
         Value:
-          _parentZoneId: 
-          _areaRatio: 0
+          _parentZoneId: A
+          _areaRatio: 0.3
           _presetArea: {fileID: 0}
-      - Key: oran
+      - Key: F
         Value:
-          _parentZoneId: 
-          _areaRatio: 0
-          _presetArea: {fileID: 0}
-      - Key: purple
+          _parentZoneId: B
+          _areaRatio: 0.1
+          _presetArea: {fileID: 2800000, guid: 0a3fa9861879cc7469ef16c79d25dcb6, type: 3}
+      - Key: G
         Value:
-          _parentZoneId: 
-          _areaRatio: 0
+          _parentZoneId: B
+          _areaRatio: 0.1
           _presetArea: {fileID: 0}
     Adjacencies:
       _serializedList:
-      - Key: green
-        Value:
-        - blue
-      - Key: cian
+      - Key: F
         Value:
-        - yel
-        - oran
-        - purple
-        - mag
+        - G
     ZonesAreasPresets:
       _serializedList: []
-  - FloorPlanId: Real
-    GridDimensions: {x: 10, y: 5}
+  - FloorPlanId: Plan 2 - uncle w test
+    GridDimensions: {x: 15, y: 10}
     ZonesConfigs:
       _serializedList:
       - Key: red
@@ -192,12 +187,12 @@ MonoBehaviour:
           _parentZoneId: 
           _areaRatio: 0
           _presetArea: {fileID: 0}
-      - Key: green
+      - Key: blue
         Value:
           _parentZoneId: 
           _areaRatio: 0
           _presetArea: {fileID: 0}
-      - Key: blue
+      - Key: green
         Value:
           _parentZoneId: 
           _areaRatio: 0
@@ -227,10 +222,21 @@ MonoBehaviour:
           _parentZoneId: 
           _areaRatio: 0
           _presetArea: {fileID: 0}
+      - Key: purple
+        Value:
+          _parentZoneId: 
+          _areaRatio: 0
+          _presetArea: {fileID: 0}
     Adjacencies:
       _serializedList:
       - Key: green
         Value:
         - blue
+      - Key: cian
+        Value:
+        - yel
+        - oran
+        - purple
+        - mag
     ZonesAreasPresets:
       _serializedList: []
diff --git forkSrcPrefix/Assets/Scripts/Cell.cs forkDstPrefix/Assets/Scripts/Cell.cs
index cfc06b26e76e881be36988befe459aa13d8266bb..eda027922efe491fbf31fe15d494127f2eb295e2 100644
--- forkSrcPrefix/Assets/Scripts/Cell.cs
+++ forkDstPrefix/Assets/Scripts/Cell.cs
@@ -7,11 +7,13 @@ public class Cell // dando preferencia para classes para passar por ref
 {
     private Zone _zone;
     private Vector2Int _gridPosition;
+    private bool _hasDoor = false;
 
-    public Dictionary<string, string> atributos;
+    //public Dictionary<string, string> atributos;
 
     public Zone Zone => _zone;
     public Vector2Int GridPosition => _gridPosition;
+    public bool HasDoor => _hasDoor;
 
 
     public Cell(int gridPositionX, int gridPositionY, Zone zone = null)
@@ -19,7 +21,7 @@ public class Cell // dando preferencia para classes para passar por ref
         _gridPosition = new Vector2Int(gridPositionX, gridPositionY);
         _zone = zone;
 
-        atributos = new Dictionary<string, string>();
+        //atributos = new Dictionary<string, string>();
     }
 
     public void SetZone(Zone newZone)
@@ -32,6 +34,12 @@ public class Cell // dando preferencia para classes para passar por ref
         return zoneToCheck == _zone;
     }
 
+
+    public void SetDoor()
+    {
+        _hasDoor = true;
+    }
+
     public List<Zone> GetParentZonesHierarchy()
     {
         List<Zone> parentZones = new List<Zone>();
diff --git forkSrcPrefix/Assets/Scripts/FloorPlanManager.cs forkDstPrefix/Assets/Scripts/FloorPlanManager.cs
index 2f8fce8eeb7ee9eb5be63fb2e854d1223add79a6..3ce7d8a11a01d4f7d34f111b7e559eec76cb5e85 100644
--- forkSrcPrefix/Assets/Scripts/FloorPlanManager.cs
+++ forkDstPrefix/Assets/Scripts/FloorPlanManager.cs
@@ -1,3 +1,4 @@
+using System;
 using System.Collections.Generic;
 using UnityEngine;
 
@@ -40,6 +41,7 @@ public class FloorPlanManager
     /// </summary>
     public Zone RootZone => _rootZone;
     public Dictionary<string, Zone> ZonesInstances => _zonesInstances;
+    public Dictionary<string, string[]> AdjacencyRules => _adjacencies;
 
 
     public FloorPlanManager(FloorPlanData floorPlanConfig)
@@ -314,6 +316,7 @@ public class FloorPlanManager
     }
 
 
+    [Obsolete]
     public bool AreAllAdjacenciesMeet()
     {
         foreach(var adjArray in _adjacencies)
diff --git forkSrcPrefix/Assets/Scripts/MethodGrowth.cs forkDstPrefix/Assets/Scripts/MethodGrowth.cs
index bd2433047e34d3e4abd418fb030a90273955c82d..1c0b7d662fa0164b2e644e32bfe074353a46e77d 100644
--- forkSrcPrefix/Assets/Scripts/MethodGrowth.cs
+++ forkDstPrefix/Assets/Scripts/MethodGrowth.cs
@@ -698,11 +698,29 @@ public partial class MethodGrowth : FPGenerationMethod
 #endregion
 
 
-
+[Obsolete]
 bool IsConnectivityConstraintMeet(FloorPlanManager floorPlanManager)
 {
     return floorPlanManager.AreAllAdjacenciesMeet();
 }
+
+// Will also check for adjacencies.
+bool PlaceDoors(FloorPlanManager floorPlanManager)
+{
+    foreach(var adjRule in floorPlanManager.AdjacencyRules)
+    {
+        // The zone that is represented by the key and have the "value" adjacentzones is
+        // the zone that will hold the doors!
+        string currentZoneId = adjRule.Key;
+
+        if(!floorPlanManager.ZonesInstances[currentZoneId].TryPlaceDoorForAdjacent(floorPlanManager.CellsGrid, adjRule.Value))
+        {
+            return false;
+        }
+    }
+
+    return true;
+}
     
 #region ========== AUXILIARY METHODS ==========
     /*
diff --git forkSrcPrefix/Assets/Scripts/VisualCell.cs forkDstPrefix/Assets/Scripts/VisualCell.cs
index 40938aa7921a708f5f5e4bae52d4ee48c8019e2f..f474664b7a7ddee5aec976eb5caf6b2c9f9f7d3f 100644
--- forkSrcPrefix/Assets/Scripts/VisualCell.cs
+++ forkDstPrefix/Assets/Scripts/VisualCell.cs
@@ -66,6 +66,11 @@ public class VisualCell : MonoBehaviour
             }
 
             Handles.Label(transform.position, $"[{transform.position.x}, {Mathf.Abs(transform.position.z)}]\n{zoneId}");
+            if(_cell.HasDoor)
+            {
+                Gizmos.color = Color.black;
+                Gizmos.DrawWireSphere(transform.position, 0.3f);
+            }
         }
     }
 }
\ No newline at end of file
diff --git forkSrcPrefix/Assets/Scripts/Zone.cs forkDstPrefix/Assets/Scripts/Zone.cs
index 063050b90da1dad8fd6ba459864340e85d75348b..9556c9015f2142d967d2d4187f89018e6a633ff6 100644
--- forkSrcPrefix/Assets/Scripts/Zone.cs
+++ forkDstPrefix/Assets/Scripts/Zone.cs
@@ -203,6 +203,12 @@ public class Zone // similar a uma estrutura de nos em arvore
         }
     }
 
+
+    public void SetDoorAt(Cell cell)
+    {
+        cell.SetDoor();
+    }
+
 #endregion
 
 
@@ -277,6 +283,9 @@ public class Zone // similar a uma estrutura de nos em arvore
                 {
                     if(adjParentZone.ZoneId == adjZone.ZoneId)
                     {
+                        // >>>>>>>>>>>>>> TEMP <<<<<<<<<<<<<<<
+                        currentBorderCell.SetDoor();
+
                         // Is adjacent to at least one cell of the adjacent zone, so its valid.
                         return true;
                     }
@@ -295,6 +304,9 @@ public class Zone // similar a uma estrutura de nos em arvore
                 {
                     if(adjParentZone.ZoneId == adjZone.ZoneId)
                     {
+                        // >>>>>>>>>>>>>> TEMP <<<<<<<<<<<<<<<
+                        currentBorderCell.SetDoor();
+
                         // Is adjacent to at least one cell of the adjacent zone, so its valid.
                         return true;
                     }
@@ -313,6 +325,10 @@ public class Zone // similar a uma estrutura de nos em arvore
                 {
                     if(adjParentZone.ZoneId == adjZone.ZoneId)
                     {
+                        // >>>>>>>>>>>>>> TEMP <<<<<<<<<<<<<<<
+                        currentBorderCell.SetDoor();
+
+
                         // Is adjacent to at least one cell of the adjacent zone, so its valid.
                         return true;
                     }
@@ -331,6 +347,9 @@ public class Zone // similar a uma estrutura de nos em arvore
                 {
                     if(adjParentZone.ZoneId == adjZone.ZoneId)
                     {
+                        // >>>>>>>>>>>>>> TEMP <<<<<<<<<<<<<<<
+                        currentBorderCell.SetDoor();
+
                         // Is adjacent to at least one cell of the adjacent zone, so its valid.
                         return true;
                     }
@@ -478,6 +497,114 @@ public class Zone // similar a uma estrutura de nos em arvore
         return true;
     }
 
+
+    public bool TryPlaceDoorForZones(CellsGrid cellsGrid, string[] adjZonesIds)
+    {
+        // para cada celula da borda verifica se tem um vizinho correspondnete a zona adjacente atual sendo checada
+        // se não ha zona atual sendo checada define a primeira zona adjacente encontrada como sendo a zona atual sendo checada
+        // adiciona a celula ao array com celulas vizinhas
+        // avança para a prixma celula
+        // se na proxima celula não a current cell como vizinha, escollhe uma celula do array para criar uma porta
+        // cria a porta, limpa o array e define a proxima zona,  se a ceula não tem zona adjacente mantem zona adj atual
+        // a ser checada como indefinida até que se encontre uma celula que tenha uma viziniha adjacente
+        
+        for(int i = 0; i < _borderCells.Length; i++)
+        {
+            Debug.LogWarning($"Border cell: {i}");
+
+            Cell currentBorderCell = _borderCells[i];
+            Vector2Int curBorderCellGridPos = currentBorderCell.GridPosition;
+            Cell cellToCheck;
+
+            // Up
+            if(cellsGrid.GetCell(curBorderCellGridPos.x, curBorderCellGridPos.y - 1, out cellToCheck))
+            {
+                Debug.Log($"check up. cell of the zone:[{curBorderCellGridPos.x},{curBorderCellGridPos.y}], cell of adj: [{curBorderCellGridPos.x},{curBorderCellGridPos.y - 1}]");
+
+                Zone adjParentZone = cellToCheck.Zone;
+                while(adjParentZone != null)
+                {
+                    //if(adjParentZone.ZoneId == adjZone.ZoneId)
+                    {
+                        // >>>>>>>>>>>>>> TEMP <<<<<<<<<<<<<<<
+                        currentBorderCell.SetDoor();
+
+                        // Is adjacent to at least one cell of the adjacent zone, so its valid.
+                        return true;
+                    }
+
+                    adjParentZone = adjParentZone.ParentZone;
+                }                
+            }
+
+            // Down
+            if(cellsGrid.GetCell(curBorderCellGridPos.x, curBorderCellGridPos.y + 1, out cellToCheck))
+            {
+                Debug.Log($"check down. cell of the zone:[{curBorderCellGridPos.x},{curBorderCellGridPos.y}], cell of adj: [{curBorderCellGridPos.x},{curBorderCellGridPos.y + 1}]");
+
+                Zone adjParentZone = cellToCheck.Zone;
+                while(adjParentZone != null)
+                {
+                    //if(adjParentZone.ZoneId == adjZone.ZoneId)
+                    {
+                        // >>>>>>>>>>>>>> TEMP <<<<<<<<<<<<<<<
+                        currentBorderCell.SetDoor();
+
+                        // Is adjacent to at least one cell of the adjacent zone, so its valid.
+                        return true;
+                    }
+
+                    adjParentZone = adjParentZone.ParentZone;
+                }
+            }
+
+            // Left
+            if(cellsGrid.GetCell(curBorderCellGridPos.x - 1, curBorderCellGridPos.y, out cellToCheck))
+            {
+                Debug.Log($"check left. cell of the zone:[{curBorderCellGridPos.x},{curBorderCellGridPos.y}], cell of adj: [{curBorderCellGridPos.x - 1},{curBorderCellGridPos.y}]");
+
+                Zone adjParentZone = cellToCheck.Zone;
+                while(adjParentZone != null)
+                {
+                    //if(adjParentZone.ZoneId == adjZone.ZoneId)
+                    {
+                        // >>>>>>>>>>>>>> TEMP <<<<<<<<<<<<<<<
+                        currentBorderCell.SetDoor();
+
+
+                        // Is adjacent to at least one cell of the adjacent zone, so its valid.
+                        return true;
+                    }
+
+                    adjParentZone = adjParentZone.ParentZone;
+                }
+            }
+
+            // Right
+            if(cellsGrid.GetCell(curBorderCellGridPos.x + 1, curBorderCellGridPos.y, out cellToCheck))
+            {
+                Debug.Log($"check right. cell of the zone:[{curBorderCellGridPos.x},{curBorderCellGridPos.y}], cell of adj: [{curBorderCellGridPos.x + 1},{curBorderCellGridPos.y}]");
+
+                Zone adjParentZone = cellToCheck.Zone;
+                while(adjParentZone != null)
+                {
+                    //if(adjParentZone.ZoneId == adjZone.ZoneId)
+                    {
+                        // >>>>>>>>>>>>>> TEMP <<<<<<<<<<<<<<<
+                        currentBorderCell.SetDoor();
+
+                        // Is adjacent to at least one cell of the adjacent zone, so its valid.
+                        return true;
+                    }
+
+                    adjParentZone = adjParentZone.ParentZone;
+                }
+            }
+        }
+
+        return true;
+    }
+
 #endregion
 
 
